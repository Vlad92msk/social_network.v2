'use client'

import { useEffect, useRef } from 'react'
import { useConference } from '../context'
import { useVideoStream } from '../hooks/useVideoStream'
import styles from './examples.module.scss'

// –õ–æ–∫–∞–ª—å–Ω–æ–µ –ø—Ä–µ–≤—å—é —Å –∑–µ—Ä–∫–∞–ª—å–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
export function LocalPreview() {
  const videoProps = useVideoStream({
    mirror: true,
    onStreamChange: (stream) => {
      console.log('Stream changed:', stream?.getTracks())
    },
  })

  return (
    <video
      {...videoProps}
      className={`${styles.video} ${styles.videoMirrored}`}
    />
  )
}

// –ü—Ä–æ—Å—Ç—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã
export function CallControls() {
  const {
    media: { stream, isVideoEnabled, isAudioEnabled },
    toggleVideo,
    toggleAudio,
    stopLocalStream,
  } = useConference()

  console.log('isVideoEnabled', isVideoEnabled)
  return (
    <div className={styles.controls}>
      <button
        className={styles.button}
        onClick={() => toggleVideo()}
        disabled={false} // –¢–µ–ø–µ—Ä—å –∫–Ω–æ–ø–∫–∞ –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞
      >
        {isVideoEnabled ? 'üé• –í—ã–∫–ª –∫–∞–º–µ—Ä—É' : 'üìµ –í–∫–ª –∫–∞–º–µ—Ä—É'}
      </button>
      <button
        className={styles.button}
        onClick={toggleAudio}
        disabled={!stream} // –ê—É–¥–∏–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø–æ—Ç–æ–∫–∞
      >
        {isAudioEnabled ? 'üé§ –í—ã–∫–ª –º–∏–∫—Ä–æ—Ñ–æ–Ω' : 'ü§´ –í–∫–ª –º–∏–∫—Ä–æ—Ñ–æ–Ω'}
      </button>
      <button
        className={styles.button}
        onClick={stopLocalStream}
        disabled={!stream} // –û—Ç–∫–ª—é—á–∞—Ç—å –ø–æ—Ç–æ–∫ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      >
        ‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å
      </button>
    </div>
  )
}

// –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–µ–≤—å—é –±–µ–∑ –∑–µ—Ä–∫–∞–ª–∞
export function MainPreview() {
  const videoProps = useVideoStream({ mirror: false })

  return (
    <div className={styles.videoContainer}>
      <h3 className={styles.title}>–û—Å–Ω–æ–≤–Ω–æ–µ –≤–∏–¥–µ–æ</h3>
      <video {...videoProps} className={styles.video} />
    </div>
  )
}

// –ó–µ—Ä–∫–∞–ª—å–Ω–æ–µ –ø—Ä–µ–≤—å—é
export function MirrorPreview() {
  const videoProps = useVideoStream({ mirror: true })

  return (
    <div className={styles.videoContainer}>
      <h3 className={styles.title}>–ó–µ—Ä–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ</h3>
      <video {...videoProps} className={`${styles.video} ${styles.videoMirrored}`} />
    </div>
  )
}

// –ú–∞–ª–µ–Ω—å–∫–æ–µ –ø—Ä–µ–≤—å—é
export function SmallPreview() {
  const videoProps = useVideoStream()

  return (
    <div className={styles.videoContainer}>
      <h3 className={styles.title}>–ú–∞–ª–µ–Ω—å–∫–æ–µ –ø—Ä–µ–≤—å—é</h3>
      <video {...videoProps} className={styles.smallVideo} />
    </div>
  )
}

// 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Canvas
export function CanvasProcessor() {
  const { media: { stream } } = useConference()
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const videoRef = useRef<HTMLVideoElement>(null)

  useEffect(() => {
    const canvas = canvasRef.current
    const video = videoRef.current

    if (!canvas || !video || !stream) return

    video.srcObject = stream
    const ctx = canvas.getContext('2d')

    const processFrame = () => {
      if (ctx) {
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height)
        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height)
        const { data } = imageData

        for (let i = 0; i < data.length; i += 4) {
          data[i] = 255 - data[i]
          data[i + 1] = 255 - data[i + 1]
          data[i + 2] = 255 - data[i + 2]
        }

        ctx.putImageData(imageData, 0, 0)
      }
      requestAnimationFrame(processFrame)
    }

    video.onplay = () => {
      processFrame()
    }
  }, [stream])

  return (
    <div className={styles.videoContainer}>
      <h3 className={styles.title}>–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ</h3>
      <video
        ref={videoRef}
        autoPlay
        playsInline
        style={{ display: 'none' }}
      />
      <canvas
        ref={canvasRef}
        width={640}
        height={480}
        className={styles.canvas}
      />
    </div>
  )
}

export function ManualControls() {
  const {
    media: { stream, isVideoEnabled, isAudioEnabled, error },
    stopLocalStream,
    startLocalStream,
  } = useConference()

  const videoProps = useVideoStream()

  return (
    <div className={styles.container}>
      <div className={styles.controls}>
        <button
          className={styles.button}
          onClick={startLocalStream}
          disabled={!!stream}
        >
          üé¨ –ù–∞—á–∞—Ç—å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é
        </button>
        <button
          className={styles.button}
          onClick={stopLocalStream}
          disabled={!stream}
        >
          ‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        </button>
      </div>

      {error && (
        <div className={styles.error}>
          –û—à–∏–±–∫–∞:
          {' '}
          {error.message}
        </div>
      )}

      {stream && <video {...videoProps} className={styles.video} />}
    </div>
  )
}
