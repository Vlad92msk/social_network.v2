import {
  ConnectionManager,
  MediaStreamManager,
  MediaStreamOptions,
  NotificationManager,
  RoomInfo,
  RoomService,
  ScreenShareManager,
  SignalingConfig,
  SignalingService,
} from './micro-services'

interface ConferenceConfig {
  ice: RTCIceServer[]
  mediaConstraints: MediaStreamOptions
  signaling: SignalingConfig
}

/**
 * ConferenceService - –≥–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ–±—ã—Ç–∏–π
 */
export class ConferenceService {
  #config: ConferenceConfig

  readonly #notificationManager: NotificationManager

  readonly #roomService: RoomService

  readonly #mediaManager: MediaStreamManager

  readonly #screenShareManager: ScreenShareManager

  readonly #signalingService: SignalingService

  readonly #connectionManager: ConnectionManager

  #initialized = false

  #subscribers: Array<(state: any) => void> = []

  constructor() {
    this.#notificationManager = new NotificationManager()
    this.#roomService = new RoomService()
    this.#mediaManager = new MediaStreamManager()
    this.#screenShareManager = new ScreenShareManager()
    this.#signalingService = new SignalingService()
    this.#connectionManager = new ConnectionManager()
  }

  async initialize(config: ConferenceConfig): Promise<void> {
    try {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏...')
      if (this.#initialized) await this.destroy()

      this.#config = config

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
      await this.#connectionManager.init({
        iceServers: [{ urls: 'stun:stun.l.google.com:19302' }],
        iceCandidatePoolSize: 1,
      })

      this.#mediaManager.init(config.mediaConstraints)
      // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
      const roomInfoPromise = this.#waitForRoomInfo()

      // –ü–æ—Ç–æ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
      await this.#signalingService.init(config.signaling)

      // –ñ–¥–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
      const roomInfo = await roomInfoPromise

      this.#roomService.init(roomInfo)

      // –°–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
      this.#setupEvents()

      this.#initialized = true
      this.#notifySubscribers()
      console.log('‚úÖ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞')
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error)
      this.#notificationManager.notify('error', '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏')
      throw error
    }
  }

  #waitForRoomInfo(): Promise<RoomInfo> {
    return new Promise((resolve) => {
      const handler = (info: RoomInfo) => {
        this.#signalingService.off('roomInfo', handler)
        resolve(info)
      }

      this.#signalingService.on('roomInfo', handler)
    })
  }

  #setupEvents(): void {
    // 1. –°–æ–±—ã—Ç–∏—è —Å–∏–≥–Ω–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    this.#signalingService
      // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      .on('connected', () => {
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É')
      })
      .on('disconnected', () => {
        console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–∏–≥–Ω–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞')
        this.#notificationManager.notify('warning', '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ')
      })
      .on('error', (error: Error) => { // –î–æ–±–∞–≤–ª–µ–Ω —Ç–∏–ø –¥–ª—è error
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:', error)
        this.#notificationManager.notify('error', '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞')
      })
      .on('stateChanged', (state) => {
        console.log('üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏–≥–Ω–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:', state)
        this.#notifySubscribers()
      })

      // –°–æ–±—ã—Ç–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤—è
      .on('userJoined', async (userId: string) => {
        console.log('üëã –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫:', userId)
        this.#roomService.addParticipant(userId)
        try {
          // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
          await this.#connectionManager.createConnection(userId)

          // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
          const { stream: localStream } = this.#mediaManager.getState()
          const { stream: screenShare } = this.#screenShareManager.getState()

          // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –∏–∑ –ø–æ—Ç–æ–∫–∞
          const addStreamTracks = async (stream: MediaStream) => {
            const tracks = stream.getTracks()
            console.log(`üì§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ${tracks.length} —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –ø–æ—Ç–æ–∫–∞:`, stream.id)
            await Promise.all(
              tracks.map((track) => this.#connectionManager.addTrack(userId, track, stream)),
            )
          }

          // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏ –∏–∑ –æ–±–æ–∏—Ö –ø–æ—Ç–æ–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
          if (localStream) {
            await addStreamTracks(localStream)
          }

          if (screenShare) {
            await addStreamTracks(screenShare)
          }

          // –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º offer
          const offer = await this.#connectionManager.createOffer(userId)
          if (offer) {
            await this.#signalingService.sendOffer(userId, offer)
            console.log('üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω offer —É—á–∞—Å—Ç–Ω–∏–∫—É:', userId)
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error)
          this.#notificationManager.notify('error', '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞')
          this.#roomService.removeParticipant(userId)
          // –í–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç —Ç–∞–∫–∂–µ –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ
          this.#connectionManager.close(userId)
        }
      })
      .on('userLeft', (userId) => {
        console.log('üëã –£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é:', userId)
        // –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        this.#connectionManager.close(userId)
        // –ó–∞—Ç–µ–º –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        this.#roomService.removeParticipant(userId)
        // –í–æ–∑–º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∫–∞ –º–µ–¥–∏–∞-—Ä–µ—Å—É—Ä—Å–æ–≤
        // this.#mediaManager.cleanupUserResources(userId)
        this.#notifySubscribers()
      })
      .on('participantsUpdated', (participants) => {
        console.log('üë• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', participants)
        this.#notifySubscribers()
      })
      .on('sdp', async ({ userId, description }) => {
        if (!description) return

        try {
          if (description.type === 'offer') {
            console.log('üì® –ü–æ–ª—É—á–µ–Ω offer –æ—Ç:', userId)

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if (!this.#connectionManager.getConnection(userId)) {
              await this.#connectionManager.createConnection(userId)
            }

            const answer = await this.#connectionManager.handleOffer(userId, description)
            await this.#signalingService.sendAnswer(userId, answer)
            console.log('üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω answer –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', userId)
          } else if (description.type === 'answer') {
            console.log('üì® –ü–æ–ª—É—á–µ–Ω answer –æ—Ç:', userId)
            await this.#connectionManager.handleAnswer(userId, description)
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ SDP:', error)
          this.#notificationManager.notify('error', '–û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏')
        }
      })
      .on('iceCandidate', async ({ userId, candidate }) => {
        if (candidate) {
          try {
            console.log('üì® –ü–æ–ª—É—á–µ–Ω ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–ª—è:', userId)
            await this.#connectionManager.addIceCandidate(userId, candidate as RTCIceCandidate)
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ICE candidate:', error)
            // –í–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.#notificationManager.notify('error', '–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è')
          }
        }
      })
      .on('userEvent', (event) => {
        console.log('üë§ –°–æ–±—ã—Ç–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', event.type, '–æ—Ç:', event.initiator)
        switch (event.type) {
          case 'mic-on':
          case 'mic-off':
          case 'camera-on':
          case 'camera-off':
            this.#notifySubscribers()
            break
          default:
            console.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è:', event.type) // –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        }
      })

    // 2. –°–æ–±—ã—Ç–∏—è WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    this.#connectionManager
      .on('track', ({ userId, stream }) => {
        if (!userId || !stream) return
        this.#roomService.addStream(userId, stream)
        this.#notifySubscribers()
      })
      .on('trackEnded', ({ userId, trackId }) => {
        if (!userId || !trackId) return
        const participant = this.#roomService.getParticipant(userId)
        participant?.streams.forEach((stream) => {
          if (stream.getTracks()
            .some((track) => track.id === trackId)) {
            this.#roomService.removeStream(userId, stream.id)
          }
        })
        this.#notifySubscribers()
      })
      .on('negotiationNeeded', async ({ userId }) => {
        try {
          if (this.#connectionManager.isConnected(userId)) {
            const offer = await this.#connectionManager.createOffer(userId)
            if (offer) await this.#signalingService.sendOffer(userId, offer)
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è offer:', error)
          this.#notificationManager.notify('error', '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è')
        }
      })
      .on('iceCandidate', async ({ userId, candidate }) => {
        if (candidate) {
          try {
            await this.#signalingService.sendIceCandidate(userId, candidate)
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ICE candidate:', error)
          }
        }
      })

    // 3. –°–æ–±—ã—Ç–∏—è –º–µ–¥–∏–∞
    this.#mediaManager
      .on('streamStarted', async (stream: MediaStream, type: 'media' | 'screen') => {
        const participants = this.#roomService.getParticipants()
        console.log(`üì§ –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ ${type === 'media' ? '–º–µ–¥–∏–∞' : '—ç–∫—Ä–∞–Ω–∞'}:`, stream.id)

        try {
          await Promise.all(participants.map(async (participant) => {
            const connection = this.#connectionManager.getConnection(participant.userId)
            if (connection) {
              await Promise.all(
                stream.getTracks().map((track) => {
                  console.log(`üì§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ ${track.kind} –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:`, participant.userId)
                  return this.#connectionManager.addTrack(participant.userId, track, stream)
                }),
              )
            }
          }))
          this.#notifySubscribers()
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞ —Ç—Ä–µ–∫–æ–≤:', error)
          this.#notificationManager.notify(
            'error',
            `–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ ${type === 'media' ? '–º–µ–¥–∏–∞' : '—ç–∫—Ä–∞–Ω–∞'}`,
          )
        }
      })
      .on('streamStopped', () => {
        this.#notifySubscribers()
      })
      .on('videoToggled', (event) => {
        this.#signalingService.sendEvent({
          type: event.active ? 'camera-on' : 'camera-off',
        })
        this.#notifySubscribers()
      })
      .on('audioToggled', (event) => {
        this.#signalingService.sendEvent({
          type: event.active ? 'mic-on' : 'mic-off',
        })
        this.#notifySubscribers()
      })

    // 4. –°–æ–±—ã—Ç–∏—è —Å–∫—Ä–∏–Ω—à–µ—Ä–∏–Ω–≥–∞
    this.#screenShareManager
      .on('streamStarted', async (stream: MediaStream) => {
        const participants = this.#roomService.getParticipants()
        console.log('üñ•Ô∏è –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞:', stream.id)

        try {
          await Promise.all(participants.map(async (participant) => {
            const connection = this.#connectionManager.getConnection(participant.userId)
            if (connection) {
              await Promise.all(
                stream.getTracks().map((track) => {
                  console.log('üñ•Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ screen –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', participant.userId)
                  return this.#connectionManager.addTrack(participant.userId, track, stream)
                }),
              )
            }
          }))
          this.#notifySubscribers()
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ —Å–∫—Ä–∏–Ω—à–µ—Ä–∏–Ω–≥–∞:', error)
          this.#notificationManager.notify('error', '–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞')
        }
      })
      .on('streamStopped', async (stream: MediaStream) => {
        console.log('üñ•Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞:', stream.id)

        try {
          const participants = this.#roomService.getParticipants()
          await Promise.all(participants.map(async (participant) => {
            const tracks = stream.getTracks()
            await Promise.all(
              tracks.map((track) => this.#connectionManager.removeTrack(participant.userId, track.id)),
            )
          }))
          this.#notifySubscribers()
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ —Å–∫—Ä–∏–Ω—à–µ—Ä–∏–Ω–≥–∞:', error)
          this.#notificationManager.notify('error', '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞')
        }
      })
      .on('error', (error: Error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–∏–Ω—à–µ—Ä–∏–Ω–≥–∞:', error)
        this.#notificationManager.notify('error', '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–∫—Ä–∞–Ω—É')
      })

    this.#roomService.on('participantAdded', () => {
      this.#notifySubscribers()
    })
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–µ–π
  async startLocalStream(): Promise<void> {
    this.#checkInitialized()
    await this.#mediaManager.startStream()
  }

  stopLocalStream(): void {
    this.#checkInitialized()
    this.#mediaManager.stopStream()
  }

  async startScreenShare(): Promise<void> {
    this.#checkInitialized()
    await this.#screenShareManager.startScreenShare()
  }

  async stopScreenShare(): Promise<void> {
    this.#checkInitialized()
    this.#screenShareManager.stopScreenShare()
  }

  async toggleVideo(): Promise<void> {
    await this.#mediaManager.toggleVideo()
  }

  toggleAudio(): void {
    this.#mediaManager.toggleAudio()
  }

  getState(): any {
    return {
      initialized: this.#initialized,
      media: this.#mediaManager.getState(),
      signaling: this.#signalingService.getState(),
      participants: this.#roomService.getParticipants(),
      streams: this.#roomService.getStreams(),
      localScreenShare: this.#screenShareManager.getState(),
    }
  }

  #checkInitialized(): void {
    if (!this.#initialized) throw new Error('–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
  }

  #notifySubscribers(): void {
    const state = this.getState()
    this.#subscribers.forEach((cb) => cb(state))
  }

  subscribe(callback: (state: any) => void): () => void {
    this.#subscribers.push(callback)
    callback(this.getState())
    return () => {
      this.#subscribers = this.#subscribers.filter((cb) => cb !== callback)
    }
  }

  async destroy(): Promise<void> {
    if (this.#initialized) {
      await Promise.all([
        this.#mediaManager.destroy(),
        this.#screenShareManager.destroy(),
        this.#connectionManager.destroy(),
        this.#signalingService.destroy(),
        this.#roomService.destroy(),
      ])
      this.#subscribers = []
      this.#initialized = false
      this.#notifySubscribers()
    }
  }
}
