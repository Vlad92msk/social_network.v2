import {
  ConnectionManager,
  MediaStreamManager,
  MediaStreamOptions,
  NotificationManager,
  RoomInfo,
  RoomService,
  ScreenShareManager,
  SignalingConfig,
  SignalingService,
} from './micro-services'

interface ConferenceConfig {
  ice: RTCIceServer[]
  mediaConstraints: MediaStreamOptions
  signaling: SignalingConfig
}

/**
 * ConferenceService - –≥–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ–±—ã—Ç–∏–π
 */
export class ConferenceService {
  #config: ConferenceConfig

  readonly #notificationManager: NotificationManager

  readonly #roomService: RoomService

  readonly #mediaManager: MediaStreamManager

  readonly #screenShareManager: ScreenShareManager

  readonly #signalingService: SignalingService

  readonly #connectionManager: ConnectionManager

  #initialized = false

  #subscribers: Array<(state) => void> = []

  constructor() {
    this.#notificationManager = new NotificationManager()
    this.#roomService = new RoomService()
    this.#mediaManager = new MediaStreamManager()
    this.#screenShareManager = new ScreenShareManager()
    this.#signalingService = new SignalingService()
    this.#connectionManager = new ConnectionManager()
  }

  async initialize(config: ConferenceConfig): Promise<void> {
    try {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏...')

      if (this.#initialized) {
        await this.destroy()
      }

      this.#config = config

      await this.#connectionManager.init({
        iceServers: config.ice,
        iceCandidatePoolSize: 10,
        iceTransportPolicy: 'all',
        bundlePolicy: 'balanced',
      })

      this.#mediaManager.init(config.mediaConstraints)

      this.#setupSignalingEvents()
      this.#setupConnectionEvents()
      this.#setupMediaEvents()

      await this.#signalingService.init(config.signaling)

      this.#initialized = true
      this.#notifySubscribers()
      console.log('‚úÖ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞')
    } catch (error) {
      const msg = '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏'
      console.error('‚ùå', msg, error)
      this.#notificationManager.notify('error', msg)
      throw error
    }
  }

  #setupSignalingEvents(): void {
    this.#signalingService.on('connected', () => {
      this.#notificationManager.notify('INFO', '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
      this.#notifySubscribers()
    })

    this.#signalingService.on('roomInfo', (roomInfo: RoomInfo) => {
      this.#roomService.initRoom(roomInfo)
      this.#notifySubscribers()
    })

    this.#signalingService.on('disconnected', () => {
      this.#notificationManager.notify('WARNING', '‚ö†Ô∏è –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏')
      this.#notifySubscribers()
    })

    this.#signalingService.on('error', (error: Error) => {
      this.#notificationManager.notify('ERROR', `‚ùå ${error.message}`)
      this.#notifySubscribers()
    })

    this.#signalingService.on('userLeft', (userId: string) => {
      console.log(`üëã –£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é: ${userId}`)
      this.#roomService.removeParticipant(userId)
      this.#connectionManager.closeConnection(userId)
      this.#notificationManager.notify('INFO', `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–∫–∏–Ω—É–ª –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é`)
      this.#notifySubscribers()
    })

    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.#signalingService.on('userJoined', async (userId: string) => {
      try {
        console.log(`üëã –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: ${userId}`)

        this.#roomService.addParticipant(userId)
        this.#notificationManager.notify('INFO', `‚ú® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è`)

        // –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await this.#connectionManager.createConnection(userId)

        // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ - —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
        const { stream: cameraStream } = this.#mediaManager.getState()
        const { stream: screenStream } = this.#screenShareManager.getState()

        const streamToSend = screenStream?.active ? screenStream : cameraStream?.active ? cameraStream : null

        if (streamToSend) {
          console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞ –Ω–æ–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É ${userId}`)
          await this.#connectionManager.addStream(userId, streamToSend)
        }

        this.#notifySubscribers()
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error)
        this.#notificationManager.notify('ERROR', '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      }
    })

    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ SDP
    this.#signalingService.on('sdp', async ({ userId, description }) => {
      try {
        console.log(`üìù –ü–æ–ª—É—á–µ–Ω ${description.type} –æ—Ç ${userId}`)

        if (description.type === 'offer') {
          if (!this.#connectionManager.getConnection(userId)) {
            await this.#connectionManager.createConnection(userId)
          }

          const answer = await this.#connectionManager.handleOffer(userId, description)

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ—Ç–æ–∫–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ñ—Ñ–µ—Ä–∞
          const { stream: cameraStream } = this.#mediaManager.getState()
          const { stream: screenStream } = this.#screenShareManager.getState()

          const streamToSend = screenStream?.active ? screenStream : cameraStream?.active ? cameraStream : null

          if (streamToSend) {
            console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞ –ø–æ—Å–ª–µ –æ—Ñ—Ñ–µ—Ä–∞ ${userId}`)
            await this.#connectionManager.addStream(userId, streamToSend)
          }

          this.#signalingService.sendAnswer(userId, answer)
        } else {
          await this.#connectionManager.handleAnswer(userId, description)
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ SDP:', error)
        this.#notificationManager.notify('ERROR', '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã—Ö')
      }
    })

    this.#signalingService.on('iceCandidate', async ({ userId, candidate }) => {
      if (!candidate) return

      try {
        await this.#connectionManager.addIceCandidate(userId, candidate)
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', error)
      }
    })
  }

  #setupConnectionEvents(): void {
    // –û—Ç–ø—Ä–∞–≤–∫–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    this.#connectionManager.on('iceCandidate', ({ userId, candidate }) => {
      this.#signalingService.sendIceCandidate(userId, candidate)
    })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
    this.#connectionManager.on('negotiationNeeded', ({ userId, description }) => {
      console.log(`üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ñ—Ñ–µ—Ä–∞ ${userId}`)
      this.#signalingService.sendOffer(userId, description)
    })

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–∞
    this.#connectionManager.on('track', ({ userId, stream }) => {
      console.log(`üì° –ü–æ–ª—É—á–µ–Ω –ø–æ—Ç–æ–∫ –æ—Ç ${userId}`)
      this.#roomService.addRemoteStream(userId, stream)
      this.#notifySubscribers()
    })

    // –û–∫–æ–Ω—á–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
    this.#connectionManager.on('trackEnded', ({ userId, streamId }) => {
      console.log(`üõë –ó–∞–≤–µ—Ä—à–µ–Ω –ø–æ—Ç–æ–∫ –æ—Ç ${userId}`)
      this.#roomService.removeRemoteStream(userId, streamId)
      this.#notifySubscribers()
    })

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    this.#connectionManager.on('connectionStateChanged', ({ userId, state }) => {
      console.log(`üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ${userId}: ${state}`)

      if (state === 'failed') {
        this.#notificationManager.notify('WARNING', `‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ ${userId}`)
      }
    })
  }

  #setupMediaEvents(): void {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–º–µ—Ä—ã
    this.#mediaManager.on('streamStarted', async () => {
      console.log('üìπ –ö–∞–º–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞')
      await this.#updateStreamsForAllParticipants()
    })

    this.#mediaManager.on('streamStopped', async () => {
      console.log('üìπ –ö–∞–º–µ—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
      await this.#updateStreamsForAllParticipants()
    })

    this.#mediaManager.on('videoToggled', async () => {
      console.log('üìπ –í–∏–¥–µ–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ')
      await this.#updateStreamsForAllParticipants()
    })

    this.#mediaManager.on('audioToggled', async () => {
      console.log('üé§ –ê—É–¥–∏–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ')
      await this.#updateStreamsForAllParticipants()
    })

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–∏–Ω—à–µ—Ä–∏–Ω–≥–∞
    this.#screenShareManager.on('streamStarted', () => {
      console.log('üñ•Ô∏è –°–∫—Ä–∏–Ω—à–µ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω')
      this.#updateStreamsForAllParticipants()
    })

    this.#screenShareManager.on('streamStopped', () => {
      console.log('üñ•Ô∏è –°–∫—Ä–∏–Ω—à–µ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
      this.#updateStreamsForAllParticipants()
    })
  }

  async #updateStreamsForParticipant(userId: string): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
      const { stream: cameraStream } = this.#mediaManager.getState()
      const { stream: screenStream } = this.#screenShareManager.getState()

      // –í—ã–±–∏—Ä–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É —Å–∫—Ä–∏–Ω—à–µ—Ä–∏–Ω–≥–∞)
      const streamToSend = screenStream?.active ? screenStream : cameraStream?.active ? cameraStream : null

      console.log('streamToSend', streamToSend)
      if (streamToSend) {
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Ç–æ–∫–∞ –¥–ª—è ${userId}`)
        await this.#connectionManager.addStream(userId, streamToSend)
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –¥–ª—è ${userId}:`, error)
      this.#notificationManager.notify('ERROR', `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –¥–ª—è ${userId}`)
    }
  }

  async #updateStreamsForAllParticipants(): Promise<void> {
    try {
      const participants = this.#roomService.getParticipants()
        .filter(({ userId }) => userId !== this.#config.signaling.userId)
console.log('participants', participants)
      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', participants.map((p) => p.userId))
      await Promise.all(participants.map(({ userId }) => this.#updateStreamsForParticipant(userId)))

      this.#notifySubscribers()
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤:', error)
      this.#notificationManager.notify('ERROR', '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–æ–≤')
    }
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞
  async startLocalStream(): Promise<void> {
    this.#checkInitialized()
    await this.#mediaManager.startStream()
  }

  stopLocalStream(): void {
    this.#checkInitialized()
    this.#mediaManager.stopStream()
  }

  async toggleVideo(): Promise<void> {
    await this.#mediaManager.toggleVideo()
  }

  toggleAudio(): void {
    this.#mediaManager.toggleAudio()
  }

  async startScreenShare(): Promise<void> {
    this.#checkInitialized()
    await this.#screenShareManager.startScreenShare()
  }

  async stopScreenShare(): Promise<void> {
    this.#checkInitialized()
    this.#screenShareManager.stopScreenShare()
  }

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
  subscribe(callback: (state: any) => void): () => void {
    this.#subscribers.push(callback)
    callback(this.getState())
    return () => {
      this.#subscribers = this.#subscribers.filter((cb) => cb !== callback)
    }
  }

  #notifySubscribers(): void {
    const state = this.getState()
    this.#subscribers.forEach((callback) => callback(state))
  }

  getState() {
    return {
      initialized: this.#initialized,
      media: this.#mediaManager.getState(),
      signaling: this.#signalingService.getState(),
      participants: this.#roomService.getParticipants(),
      streams: this.#roomService.getStreams(),
      localScreenShare: this.#screenShareManager.getState(),
    }
  }

  #checkInitialized(): void {
    if (!this.#initialized) {
      throw new Error('‚ùå –°–µ—Ä–≤–∏—Å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
    }
  }

  async destroy(): Promise<void> {
    if (this.#initialized) {
      console.log('üßπ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏')

      await Promise.all([
        this.#mediaManager.destroy(),
        this.#screenShareManager.destroy(),
        this.#connectionManager.destroy(),
        this.#signalingService.destroy(),
        this.#roomService.destroy(),
      ])

      this.#subscribers = []
      this.#initialized = false
      this.#notifySubscribers()
      console.log('‚úÖ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
    }
  }
}
