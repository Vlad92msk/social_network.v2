import { EventEmitter } from 'events'

interface StreamInfo {
  stream: MediaStream
}

/**
 * ConnectionManager –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
 * –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:
 * - –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∞–º–∏ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ)
 * - –û–±–º–µ–Ω SDP (offer/answer)
 */
export class ConnectionManager extends EventEmitter {
  #connections = new Map<string, RTCPeerConnection>()

  #streams = new Map<string, Map<string, StreamInfo>>()

  #config: RTCConfiguration

  async init(config: RTCConfiguration): Promise<void> {
    this.#config = config
    console.log('üöÄ ConnectionManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  async createConnection(userId: string): Promise<void> {
    console.log(`üìû –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è ${userId}`)

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    this.closeConnection(userId)

    const connection = new RTCPeerConnection(this.#config)

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    connection.onconnectionstatechange = () => {
      const state = connection.connectionState
      console.log(`üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ${userId}: ${state}`)
      this.emit('connectionStateChanged', { userId, state })
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    connection.onicecandidate = ({ candidate }) => {
      if (candidate) {
        console.log(`üßä ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–ª—è ${userId}`)
        this.emit('iceCandidate', { userId, candidate })
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–µ–∫–æ–≤
    connection.ontrack = (event) => {
      const stream = event.streams[0]
      if (!stream) return

      console.log(`üì° –ü–æ–ª—É—á–µ–Ω —Ç—Ä–µ–∫ –æ—Ç ${userId}`)

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç–æ–∫–µ
      if (!this.#streams.has(userId)) {
        this.#streams.set(userId, new Map())
      }
      this.#streams.get(userId)!.set(stream.id, { stream })

      // –û–ø–æ–≤–µ—â–∞–µ–º –æ –Ω–æ–≤–æ–º —Ç—Ä–µ–∫–µ
      this.emit('track', { userId, stream })

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
      event.track.onended = () => {
        console.log(`üõë –¢—Ä–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –æ—Ç ${userId}`)
        this.#streams.get(userId)?.delete(stream.id)
        this.emit('trackEnded', { userId, streamId: stream.id })
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
    connection.onnegotiationneeded = async () => {
      try {
        if (connection.signalingState === 'stable') {
          const offer = await connection.createOffer()
          await connection.setLocalDescription(offer)
          this.emit('negotiationNeeded', {
            userId,
            description: connection.localDescription!,
          })
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –¥–ª—è ${userId}:`, error)
      }
    }

    this.#connections.set(userId, connection)
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∞
   */
  async addStream(userId: string, stream: MediaStream): Promise<void> {
    const connection = this.#connections.get(userId)
    if (!connection) return

    console.log(`üì§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –¥–ª—è ${userId}`)

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏
      const senders = connection.getSenders()

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏
      for (const track of stream.getTracks()) {
        const sender = senders.find((s) => s.track?.kind === track.kind)

        if (sender) {
          await sender.replaceTrack(track)
        } else {
          connection.addTrack(track, stream)
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç–æ–∫–µ
      if (!this.#streams.has(userId)) {
        this.#streams.set(userId, new Map())
      }
      this.#streams.get(userId)!.set(stream.id, { stream })
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –¥–ª—è ${userId}:`, error)
      throw error
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∞
   */
  async removeStream(userId: string, streamId: string): Promise<void> {
    const connection = this.#connections.get(userId)
    const streamInfo = this.#streams.get(userId)?.get(streamId)

    if (!connection || !streamInfo) return

    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –¥–ª—è ${userId}`)

    try {
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏
      connection.getSenders().forEach((sender) => {
        if (sender.track) {
          sender.track.stop()
          connection.removeTrack(sender)
        }
      })

      // –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç–æ–∫–µ
      this.#streams.get(userId)?.delete(streamId)
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –¥–ª—è ${userId}:`, error)
      throw error
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ offer
   */
  async handleOffer(userId: string, offer: RTCSessionDescriptionInit): Promise<RTCSessionDescriptionInit> {
    const connection = this.#connections.get(userId)
    if (!connection) throw new Error(`–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ${userId}`)

    console.log(`üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ offer –æ—Ç ${userId}`)

    await connection.setRemoteDescription(new RTCSessionDescription(offer))
    const answer = await connection.createAnswer()
    await connection.setLocalDescription(answer)

    return answer
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ answer
   */
  async handleAnswer(userId: string, answer: RTCSessionDescriptionInit): Promise<void> {
    const connection = this.#connections.get(userId)
    if (!connection) throw new Error(`–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ${userId}`)

    console.log(`üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ answer –æ—Ç ${userId}`)
    await connection.setRemoteDescription(new RTCSessionDescription(answer))
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
   */
  async addIceCandidate(userId: string, candidate: RTCIceCandidate): Promise<void> {
    const connection = this.#connections.get(userId)
    if (!connection) return

    try {
      await connection.addIceCandidate(candidate)
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è ${userId}:`, error)
    }
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  closeConnection(userId: string): void {
    const connection = this.#connections.get(userId)
    if (!connection) return

    console.log(`üëã –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ${userId}`)

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏
    connection.getSenders().forEach((sender) => {
      if (sender.track) sender.track.stop()
    })

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    connection.close()

    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    this.#connections.delete(userId)
    this.#streams.delete(userId)
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Ç–æ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  getStreams(userId: string): StreamInfo[] {
    return Array.from(this.#streams.get(userId)?.values() || [])
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  getConnection(userId: string): RTCPeerConnection | undefined {
    return this.#connections.get(userId)
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  destroy(): void {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    for (const userId of this.#connections.keys()) {
      this.closeConnection(userId)
    }

    // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    this.#connections.clear()
    this.#streams.clear()
    this.removeAllListeners()
  }
}
