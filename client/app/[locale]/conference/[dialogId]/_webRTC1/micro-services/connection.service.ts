import { EventEmitter } from 'events'

type StreamType = 'camera' | 'screen'

interface StreamInfo {
  stream: MediaStream
  type: StreamType
}

/**
 * ConnectionManager —É–ø—Ä–∞–≤–ª—è–µ—Ç WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏.
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
 * - –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ RTCPeerConnection
 * - –û–±—Ä–∞–±–æ—Ç–∫—É ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∞–º–∏
 */
export class ConnectionManager extends EventEmitter {
  #initialized = false
  #config: RTCConfiguration
  #connections = new Map<string, RTCPeerConnection>()
  #streams = new Map<string, Map<string, StreamInfo>>() // userId -> streamId -> StreamInfo

  /**
   * –°–æ–±—ã—Ç–∏—è:
   * - error: { message: string, userId?: string }
   * - connectionStateChanged: { userId: string, state: RTCPeerConnectionState }
   * - iceCandidate: { userId: string, candidate: RTCIceCandidate }
   * - track: { userId: string, stream: MediaStream, type: StreamType }
   * - trackEnded: { userId: string, streamId: string, type: StreamType }
   * - negotiationNeeded: { userId: string, description: RTCSessionDescription }
   */

  async init(config: RTCConfiguration): Promise<void> {
    try {
      this.#config = config
      this.#initialized = true
      console.log('üöÄ ConnectionManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
    } catch (error) {
      const msg = '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ConnectionManager'
      console.error(msg, error)
      this.emit('error', { message: msg })
      throw new Error(msg)
    }
  }

  async createConnection(userId: string): Promise<void> {
    this.#checkInitialized()

    try {
      console.log(`üìû –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`)
      const connection = new RTCPeerConnection(this.#config)

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      connection.onconnectionstatechange = () => {
        const state = connection.connectionState
        console.log(`üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ${userId}: ${state}`)

        this.emit('connectionStateChanged', { userId, state })

        if (state === 'failed') {
          console.log(`‚ö†Ô∏è –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å ICE –¥–ª—è ${userId}`)
          connection.restartIce()
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
      connection.onicecandidate = ({ candidate }) => {
        if (candidate) {
          console.log(`üßä –ù–æ–≤—ã–π ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–ª—è ${userId}`)
          this.emit('iceCandidate', { userId, candidate })
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤
      connection.ontrack = (event) => {
        const stream = event.streams[0]
        if (!stream) return

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ—Ç–æ–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—Ä–µ–∫–æ–≤
        const type: StreamType = event.track.kind === 'video'
          ? (stream.getVideoTracks().length > 1 ? 'screen' : 'camera')
          : 'camera'

        console.log(`üì° –ü–æ–ª—É—á–µ–Ω —Ç—Ä–µ–∫ –æ—Ç ${userId}: ${type}`)
        this.emit('track', { userId, stream, type })

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç–æ–∫–µ
        if (!this.#streams.has(userId)) {
          this.#streams.set(userId, new Map())
        }
        this.#streams.get(userId)!.set(stream.id, { stream, type })

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞
        event.track.onended = () => {
          console.log(`üõë –¢—Ä–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: ${userId}, ${type}`)
          this.#streams.get(userId)?.delete(stream.id)
          this.emit('trackEnded', { userId, streamId: stream.id, type })
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
      connection.onnegotiationneeded = async () => {
        try {
          if (connection.signalingState === 'stable') {
            const offer = await connection.createOffer()
            await connection.setLocalDescription(offer)
            console.log(`üìù –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Å ${userId}`)
            this.emit('negotiationNeeded', {
              userId,
              description: connection.localDescription!
            })
          }
        } catch (error) {
          const msg = `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è ${userId}`
          console.error(msg, error)
          this.emit('error', { message: msg, userId })
        }
      }

      this.#connections.set(userId, connection)

    } catch (error) {
      const msg = `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è ${userId}`
      console.error(msg, error)
      this.emit('error', { message: msg, userId })
      throw new Error(msg)
    }
  }

  async addStream(userId: string, stream: MediaStream, type: StreamType): Promise<void> {
    const connection = this.#getConnection(userId)

    try {
      console.log(`üì§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ${type} –ø–æ—Ç–æ–∫–∞ –¥–ª—è ${userId}`)

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏ –≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      const tracks = stream.getTracks()
      for (const track of tracks) {
        const sender = connection.addTrack(track, stream)

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–¥–µ–æ
        if (track.kind === 'video') {
          const params = sender.getParameters()
          params.encodings = [{
            maxBitrate: type === 'screen' ? 2500000 : 1000000,
            maxFramerate: 30
          }]
          await sender.setParameters(params)
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç–æ–∫–µ
      if (!this.#streams.has(userId)) {
        this.#streams.set(userId, new Map())
      }
      this.#streams.get(userId)!.set(stream.id, { stream, type })

    } catch (error) {
      const msg = `–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ${type} –ø–æ—Ç–æ–∫–∞ –¥–ª—è ${userId}`
      console.error(msg, error)
      this.emit('error', { message: msg, userId })
      throw new Error(msg)
    }
  }

  async removeStream(userId: string, streamId: string): Promise<void> {
    const connection = this.#getConnection(userId)
    const streamInfo = this.#streams.get(userId)?.get(streamId)

    if (!streamInfo) {
      console.warn(`‚ö†Ô∏è –ü–æ—Ç–æ–∫ ${streamId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ${userId}`)
      return
    }

    try {
      console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ ${streamId} –¥–ª—è ${userId}`)

      const senders = connection.getSenders()
      const tracks = streamInfo.stream.getTracks()

      for (const track of tracks) {
        const sender = senders.find(s => s.track === track)
        if (sender) {
          await connection.removeTrack(sender)
        }
      }

      this.#streams.get(userId)?.delete(streamId)

    } catch (error) {
      const msg = `–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –¥–ª—è ${userId}`
      console.error(msg, error)
      this.emit('error', { message: msg, userId })
      throw new Error(msg)
    }
  }

  async handleOffer(userId: string, offer: RTCSessionDescriptionInit): Promise<RTCSessionDescriptionInit> {
    const connection = this.#getConnection(userId)

    try {
      console.log(`üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç ${userId}`)
      await connection.setRemoteDescription(new RTCSessionDescription(offer))

      const answer = await connection.createAnswer()
      await connection.setLocalDescription(answer)

      return answer

    } catch (error) {
      const msg = `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç ${userId}`
      console.error(msg, error)
      this.emit('error', { message: msg, userId })
      throw new Error(msg)
    }
  }

  async handleAnswer(userId: string, answer: RTCSessionDescriptionInit): Promise<void> {
    const connection = this.#getConnection(userId)

    try {
      console.log(`üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç ${userId}`)
      await connection.setRemoteDescription(new RTCSessionDescription(answer))

    } catch (error) {
      const msg = `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç ${userId}`
      console.error(msg, error)
      this.emit('error', { message: msg, userId })
      throw new Error(msg)
    }
  }

  async addIceCandidate(userId: string, candidate: RTCIceCandidate): Promise<void> {
    const connection = this.#getConnection(userId)

    try {
      console.log(`üßä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è ${userId}`)
      await connection.addIceCandidate(candidate)

    } catch (error) {
      const msg = `–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è ${userId}`
      console.error(msg, error)
      // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
      this.emit('error', { message: msg, userId })
    }
  }

  closeConnection(userId: string): void {
    try {
      const connection = this.#connections.get(userId)
      if (connection) {
        console.log(`üëã –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ${userId}`)

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏
        connection.getSenders().forEach(sender => {
          if (sender.track) sender.track.stop()
        })

        connection.close()
        this.#connections.delete(userId)
        this.#streams.delete(userId)
      }
    } catch (error) {
      const msg = `–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ${userId}`
      console.error(msg, error)
      this.emit('error', { message: msg, userId })
    }
  }

  getConnection(userId: string): RTCPeerConnection | undefined {
    return this.#connections.get(userId)
  }

  getStreams(userId: string): StreamInfo[] {
    return Array.from(this.#streams.get(userId)?.values() || [])
  }

  destroy(): void {
    if (this.#initialized) {
      console.log('üßπ –û—á–∏—Å—Ç–∫–∞ ConnectionManager')

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      for (const userId of this.#connections.keys()) {
        this.closeConnection(userId)
      }

      this.#connections.clear()
      this.#streams.clear()
      this.removeAllListeners()
      this.#initialized = false
    }
  }

  #getConnection(userId: string): RTCPeerConnection {
    const connection = this.#connections.get(userId)
    if (!connection) {
      throw new Error(`–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`)
    }
    return connection
  }

  #checkInitialized(): void {
    if (!this.#initialized) {
      throw new Error('ConnectionManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
    }
  }
}
