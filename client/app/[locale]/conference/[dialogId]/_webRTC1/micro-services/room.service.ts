import { EventEmitter } from 'events'

export interface Participant {
  userId: string
  streams: Set<MediaStream>
}

export interface RoomInfo {
  dialogId: string
  participants: string[]
  createdAt: string
}

/**
 * RoomService –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏ –∏—Ö –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∞–º–∏
 */
export class RoomService extends EventEmitter {
  #room?: RoomInfo

  #participants = new Map<string, Participant>()

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–Ω–∞—Ç—ã
   */
  init(info: RoomInfo): void {
    this.#room = info
    this.#participants.clear()

    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    info.participants.forEach((userId) => {
      this.#participants.set(userId, {
        userId,
        streams: new Set(),
      })
    })

    this.emit('initialized', info)
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
   */
  addParticipant(userId: string): void {
    if (!this.#room) return

    console.log('‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', userId)

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –µ—â–µ –Ω–µ—Ç
    if (!this.#participants.has(userId)) {
      this.#participants.set(userId, {
        userId,
        streams: new Set<MediaStream>(),
      })

      this.#room.participants.push(userId)
      console.log('‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω:', userId)
      this.emit('participantAdded', { userId })
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
   */
  removeParticipant(userId: string): void {
    if (!this.#room) return

    const participant = this.#participants.get(userId)
    if (!participant) return

    // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞
    participant.streams.forEach((stream) => {
      stream.getTracks().forEach((track) => track.stop())
    })

    // –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    this.#participants.delete(userId)
    const index = this.#room.participants.indexOf(userId)
    if (index !== -1) {
      this.#room.participants.splice(index, 1)
    }

    this.emit('participantRemoved', { userId })
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫—É
   */
  addStream(userId: string, stream: MediaStream): void {
    console.log(`‚ûï –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Ç–æ–∫ ${stream.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

    const participant = this.#participants.get(userId);
    if (!participant) {
      console.warn(`‚ö†Ô∏è –£—á–∞—Å—Ç–Ω–∏–∫ ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞`);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–µ–∫–æ–≤ –≤ –ø–æ—Ç–æ–∫–µ
    const tracks = stream.getTracks();
    console.log(`üìä –ü–æ—Ç–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç ${tracks.length} —Ç—Ä–µ–∫–æ–≤:`,
      tracks.map(t => ({ kind: t.kind, id: t.id, enabled: t.enabled, muted: t.muted }))
    );

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ç–æ–∫ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
    const sizeBefore = participant.streams.size;
    participant.streams.add(stream);
    const sizeAfter = participant.streams.size;

    if (sizeAfter > sizeBefore) {
      console.log(`‚úÖ –ü–æ—Ç–æ–∫ ${stream.id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ —É—á–∞—Å—Ç–Ω–∏–∫—É ${userId}`);
      this.emit('streamAdded', { userId, stream });
    } else {
      console.log(`‚ÑπÔ∏è –ü–æ—Ç–æ–∫ ${stream.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${userId}`);
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∞ —É —É—á–∞—Å—Ç–Ω–∏–∫–∞
   */
  removeStream(userId: string, streamId: string): void {
    console.log(`‚ûñ –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –ø–æ—Ç–æ–∫ ${streamId} —É —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${userId}`)

    const participant = this.#participants.get(userId)
    if (!participant) {
      console.warn(`‚ö†Ô∏è –£—á–∞—Å—Ç–Ω–∏–∫ ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞`)
      return
    }

    // –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –ø–æ—Ç–æ–∫
    participant.streams.forEach((stream) => {
      if (stream.id === streamId) {
        stream.getTracks().forEach((track) => track.stop())
        participant.streams.delete(stream)
        console.log(`‚úÖ –ü–æ—Ç–æ–∫ ${streamId} —É–¥–∞–ª–µ–Ω —É —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${userId}`)
        this.emit('streamRemoved', { userId, streamId })
      }
    })
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
   */
  getParticipant(userId: string): Participant | undefined {
    return this.#participants.get(userId)
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
   */
  getParticipants(): Participant[] {
    return Array.from(this.#participants.values())
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–æ–≤
   */
  getStreams(): Array<{ userId: string, streams: MediaStream[] }> {
    const result: Array<{ userId: string, streams: MediaStream[] }> = []

    this.#participants.forEach((participant, userId) => {
      if (participant.streams.size > 0) {
        result.push({
          userId,
          streams: Array.from(participant.streams),
        })
      }
    })

    return result
  }

  getRoomInfo(): RoomInfo | undefined {
    return this.#room
  }

  getParticipantCount(): number {
    return this.#participants.size
  }

  hasParticipant(userId: string): boolean {
    return this.#participants.has(userId)
  }

  getParticipantTracks(userId: string, kind?: 'audio' | 'video'): MediaStreamTrack[] {
    const participant = this.#participants.get(userId)
    if (!participant) return []

    const tracks: MediaStreamTrack[] = []
    participant.streams.forEach((stream) => {
      stream.getTracks().forEach((track) => {
        if (!kind || track.kind === kind) {
          tracks.push(track)
        }
      })
    })
    return tracks
  }

  muteParticipantAudio(userId: string): void {
    const audioTracks = this.getParticipantTracks(userId, 'audio')
    audioTracks.forEach((track) => track.enabled = false)
    this.emit('participantAudioMuted', { userId })
  }

  unmuteParticipantAudio(userId: string): void {
    const audioTracks = this.getParticipantTracks(userId, 'audio')
    audioTracks.forEach((track) => track.enabled = true)
    this.emit('participantAudioUnmuted', { userId })
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  destroy(): void {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∏
    this.#participants.forEach((participant) => {
      participant.streams.forEach((stream) => {
        stream.getTracks().forEach((track) => track.stop())
      })
    })

    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    this.#participants.clear()
    this.#room = undefined
    this.removeAllListeners()
  }
}
