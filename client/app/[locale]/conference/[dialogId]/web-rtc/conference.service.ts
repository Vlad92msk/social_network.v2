import {
  ConnectionManager,
  MediaStreamManager,
  MediaStreamOptions,
  NotificationManager,
  RoomInfo,
  RoomService,
  ScreenShareManager,
  SignalingConfig,
  SignalingService,
} from './micro-services'
import { UserInfo } from '../../../../../../swagger/userInfo/interfaces-userInfo'

export interface ConferenceConfig {
  ice: RTCIceServer[]
  mediaConstraints: MediaStreamOptions
  signaling: SignalingConfig
}

/**
 * ConferenceService - –≥–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ–±—ã—Ç–∏–π
 */
export class ConferenceService {
  #config: ConferenceConfig

  readonly #notificationManager: NotificationManager

  readonly #roomService: RoomService

  readonly #mediaManager: MediaStreamManager

  readonly #screenShareManager: ScreenShareManager

  readonly #signalingService: SignalingService

  readonly #connectionManager: ConnectionManager

  #initialized = false

  #subscribers: Array<(state: any) => void> = []

  constructor() {
    this.#notificationManager = new NotificationManager()
    this.#roomService = new RoomService()
    this.#mediaManager = new MediaStreamManager()
    this.#screenShareManager = new ScreenShareManager()
    this.#signalingService = new SignalingService()
    this.#connectionManager = new ConnectionManager()
  }

  async initialize(config: ConferenceConfig) {
    try {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏...')
      if (this.#initialized) await this.destroy()

      this.#config = config

      await this.#connectionManager.init({
        iceServers: config.ice,
        iceCandidatePoolSize: 1,
      })

      this.#mediaManager.init(config.mediaConstraints)
      // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
      const roomInfoPromise = this.#waitForRoomInfo()

      // –ü–æ—Ç–æ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
      await this.#signalingService.init(config.signaling)

      // –ñ–¥–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
      const roomInfo = await roomInfoPromise

      this.#roomService.init(roomInfo)

      // –°–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
      this.#setupEvents()

      this.#initialized = true
      this.#notifySubscribers()
      console.log('‚úÖ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞')
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error)
      this.#notificationManager.notify('error', '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏')
      throw error
    }
  }

  #setupEvents() {
    // 1. –°–æ–±—ã—Ç–∏—è —Å–∏–≥–Ω–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    this.#signalingService
      // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      .on('connected', () => {
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É')
      })
      .on('disconnected', () => {
        console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–∏–≥–Ω–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞')
        this.#notificationManager.notify('warning', '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ')
      })
      .on('error', (error: Error) => { // –î–æ–±–∞–≤–ª–µ–Ω —Ç–∏–ø –¥–ª—è error
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:', error)
        this.#notificationManager.notify('error', '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞')
      })
      .on('stateChanged', (state) => {
        console.log('üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏–≥–Ω–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:', state)
        // this.#notifySubscribers()
      })

      // –°–æ–±—ã—Ç–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤—è
      .on('userJoined', async (user: UserInfo) => {
        try {
          this.#roomService.addParticipant(user)

          const { stream: localStream } = this.#mediaManager.getState()
          const { stream: screenShare } = this.#screenShareManager.getState()

          const streams = [localStream, screenShare].filter(Boolean) as MediaStream[]
          if (streams.length > 0) {
            await this.handleStreamTracks(String(user.id), streams, this.#connectionManager, this.#signalingService)
          }
        } catch (error) {
          this.#notificationManager.notify('error', `‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞, ${error}`)
          this.#roomService.removeParticipant(String(user.id))
          this.#connectionManager.close(String(user.id))
        }
      })

      // –î–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
      .on('userLeft', (userId) => {
        console.log('üëã –£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é:', userId)
        // –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        this.#connectionManager.close(userId)
        // –ó–∞—Ç–µ–º –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        this.#roomService.removeParticipant(userId)
        // –í–æ–∑–º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∫–∞ –º–µ–¥–∏–∞-—Ä–µ—Å—É—Ä—Å–æ–≤
        // this.#mediaManager.cleanupUserResources(userId)
        this.#notifySubscribers()
      })
      .on('participantsUpdated', (participants) => {
        console.log('üë• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', participants)
        this.#notifySubscribers()
      })
      .on('sdp', async ({ userId, description }) => {
        if (!description) return

        try {
          if (description.type === 'offer') {
            console.log('üì® –ü–æ–ª—É—á–µ–Ω offer –æ—Ç:', userId)

            if (!this.#connectionManager.getConnection(userId)) {
              await this.#connectionManager.createConnection(userId)
            }

            const answer = await this.#connectionManager.handleOffer(userId, description)
            await this.#signalingService.sendAnswer(userId, answer)
            console.log('üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω answer –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', userId)

            // –¢–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–∏ —Å—Ç—Ä–∏–º—ã
            const { stream: localStream } = this.#mediaManager.getState()
            const { stream: screenShare } = this.#screenShareManager.getState()

            const streams = [localStream, screenShare].filter(Boolean) as MediaStream[]
            if (streams.length > 0) {
              await this.handleStreamTracks(userId, streams, this.#connectionManager, this.#signalingService)
            }
          } else if (description.type === 'answer') {
            console.log('üì® –ü–æ–ª—É—á–µ–Ω answer –æ—Ç:', userId)
            await this.#connectionManager.handleAnswer(userId, description)
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ SDP:', error)
          this.#notificationManager.notify('error', '–û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏')
        }
      })
      .on('iceCandidate', async ({ userId, candidate }) => {
        if (candidate) {
          try {
            console.log('üì® –ü–æ–ª—É—á–µ–Ω ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–ª—è:', userId)
            await this.#connectionManager.addIceCandidate(userId, candidate as RTCIceCandidate)
            this.#notifySubscribers()
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ICE candidate:', error)
            this.#notificationManager.notify('error', '–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è')
          }
        }
      })
      .on('userEvent', (event) => {
        console.log('üë§ –°–æ–±—ã—Ç–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', event.event.type, '–æ—Ç:', event.initiator, event)
        switch (event.event.type) {
          case 'screen-share-on': {
            this.#roomService.setStreamType(
              event.initiator,
              event.event.payload.streamId,
              'screen',
            )
            break
          }
          case 'screen-share-off': {
            this.#roomService.removeStream(event.initiator, event.event.payload.streamId)
            break
          }
          case 'camera-off': {
            this.#roomService.onCameraOff(event.initiator)
            break
          }
          case 'mic-off': {
            this.#roomService.muteParticipantAudio(event.initiator)
            break
          }
          case 'mic-on': {
            this.#roomService.unmuteParticipantAudio(event.initiator)
            break
          }
          case 'camera-on': {
            this.#roomService.setStreamType(
              event.initiator,
              event.event.payload.streamId,
              'camera',
            )
            break
          }
          default:
            console.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è:', event.type) // –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
            break
        }
        this.#notifySubscribers()
      })

    // 2. –°–æ–±—ã—Ç–∏—è WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    this.#connectionManager
      .on('track', ({ userId, track, stream }) => {
        if (!userId || !stream) return

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ç–æ–∫ –≤ RoomService
        this.#roomService.addStream(userId, stream)

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ room service –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        const participant = this.#roomService.getParticipant(userId)
        console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞:', {
          userId,
          streamsCount: participant?.streams.size,
          streams: Array.from(participant?.streams || []).map((s) => s.id),
        })

        this.#notifySubscribers()
      })
      .on('iceCandidate', async ({ userId, candidate }) => {
        if (candidate) {
          try {
            await this.#signalingService.sendIceCandidate(userId, candidate)
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ICE candidate:', error)
          }
        }
      })
      .on('connectionLost', async ({ userId }) => {
        console.log(`‚ùå –ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${userId}`)

        // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        this.#connectionManager.close(userId)
        this.#roomService.removeParticipant(userId)
      })
      .on('trackEnded', async ({ userId, trackId }) => {
        console.log(`trackEnded ${userId}, ${trackId}`)
      })

    // 3. –°–æ–±—ã—Ç–∏—è –º–µ–¥–∏–∞
    this.#mediaManager
      .on('streamStarted', async (stream: MediaStream) => {
        const participants = this.#roomService.getParticipants()
          .filter(({ userId }) => userId !== this.#config.signaling.userId)

        try {
          await Promise.all(
            participants.map(({ userId }) => this.handleStreamTracks(userId, [stream], this.#connectionManager, this.#signalingService)),
          )
          this.#signalingService.sendEvent({
            type: 'camera-on',
            payload: { streamId: stream.id },
          })
          this.#notifySubscribers()
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞ —Ç—Ä–µ–∫–æ–≤:', error)
          this.#notificationManager.notify('error', '–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ —Å –∫–∞–º–µ—Ä—ã')
        }
      })
      .on('streamStopped', ({ streamId }: { streamId: string }) => {
        this.#signalingService.sendEvent({
          type: 'camera-off',
          payload: { streamId },
        })
        this.#notifySubscribers()
      })
      .on('audioToggled', ({ streamId, active }: { active: boolean, streamId: string }) => {
        this.#signalingService.sendEvent({
          type: active ? 'mic-on' : 'mic-off',
          payload: { streamId },
        })
        this.#notifySubscribers()
      })
      .on('toggleVideo', ({ streamId, type }: { type: 'camera-on' | 'camera-off', streamId: string }) => {
        this.#signalingService.sendEvent({
          type,
          payload: { streamId },
        })
        this.#notifySubscribers()
      })
      .on('stateChanged', () => {
        this.#notifySubscribers()
      })

    // 4. –°–æ–±—ã—Ç–∏—è —Å–∫—Ä–∏–Ω—à–µ—Ä–∏–Ω–≥–∞
    this.#screenShareManager
      .on('streamStarted', async (stream: MediaStream) => {
        const participants = this.#roomService.getParticipants()
          .filter(({ userId }) => userId !== this.#config.signaling.userId)

        try {
          await Promise.all(
            participants.map(({ userId }) => this.handleStreamTracks(userId, [stream], this.#connectionManager, this.#signalingService)),
          )
          this.#signalingService.sendEvent({
            type: 'screen-share-on',
            payload: { streamId: stream.id },
          })
          this.#notifySubscribers()
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ —Å–∫—Ä–∏–Ω—à–µ—Ä–∏–Ω–≥–∞:', error)
          this.#notificationManager.notify('error', '–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞')
        }
      })
      .on('streamStopped', async ({ streamId }: { streamId: string }) => {
        console.log('üñ•Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞:', streamId)

        this.#signalingService.sendEvent({
          type: 'screen-share-off',
          payload: { streamId },
        })
        this.#notifySubscribers()
      })
      .on('error', (error: Error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–∏–Ω—à–µ—Ä–∏–Ω–≥–∞:', error)
        this.#notificationManager.notify('error', '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–∫—Ä–∞–Ω—É')
      })
      .on('stateChanged', () => {
        this.#notifySubscribers()
      })

    this.#roomService
      .on('participantAdded', ({ user }: { user: UserInfo }) => {
        this.#notificationManager.notify('INFO', `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏`)
        this.#notifySubscribers()
      })
      .on('participantRemoved', ({ user }: { user: UserInfo }) => {
        this.#notificationManager.notify('INFO', `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.name} –ø–æ–∫–∏–Ω—É–ª –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é`)
        this.#notifySubscribers()
      })
      .on('participantAudioUnmuted', () => {
        this.#notifySubscribers()
      })
      .on('participantAudioMuted', () => {
        this.#notifySubscribers()
      })
      .on('onCameraOff', () => {
        console.log('onCameraOff')
        this.#notifySubscribers()
      })
  }

  #waitForRoomInfo(): Promise<RoomInfo> {
    return new Promise((resolve) => {
      const handler = (info: RoomInfo) => {
        this.#signalingService.off('roomInfo', handler)
        resolve(info)
      }

      this.#signalingService.on('roomInfo', handler)
    })
  }

  async handleStreamTracks(
    userId: string,
    streams: MediaStream[],
    connectionManager: ConnectionManager,
    signalingService: SignalingService,
  ) {
    // Create/check connection
    if (!connectionManager.getConnection(userId)) {
      await connectionManager.createConnection(userId)
    }

    // Add all tracks from all streams
    await Promise.all(
      streams.flatMap((stream) => stream.getTracks().map((track) => connectionManager.addTrack(userId, track, stream))),
    )

    // Create single offer after adding all tracks
    const offer = await connectionManager.createOffer(userId)
    if (offer) {
      await signalingService.sendOffer(userId, offer)
    }
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–µ–π
  async startLocalStream() {
    this.#checkInitialized()
    await this.#mediaManager.startStream()
  }

  stopLocalStream(): void {
    this.#checkInitialized()
    this.#mediaManager.stopStream()
  }

  async startScreenShare() {
    this.#checkInitialized()
    await this.#screenShareManager.startScreenShare()
  }

  async stopScreenShare() {
    this.#checkInitialized()
    this.#screenShareManager.stopScreenShare()
  }

  async toggleVideo() {
    await this.#mediaManager.toggleVideo()
  }

  async toggleAudio() {
    await this.#mediaManager.toggleAudio()
  }

  getState() {
    return {
      initialized: this.#initialized,
      media: this.#mediaManager.getState(),
      signaling: this.#signalingService.getState(),
      participants: this.#roomService.getParticipants(),
      localScreenShare: this.#screenShareManager.getState(),
      currentUser: this.#roomService.getCurrentUser(),
    }
  }

  #checkInitialized() {
    if (!this.#initialized) throw new Error('–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
  }

  #notifySubscribers() {
    const state = this.getState()
    console.log('__STATE___', state)
    this.#subscribers.forEach((cb) => cb(state))
  }

  subscribe(callback: (state: any) => void) {
    this.#subscribers.push(callback)
    callback(this.getState())
    return () => {
      this.#subscribers = this.#subscribers.filter((cb) => cb !== callback)
    }
  }

  async destroy() {
    if (this.#initialized) {
      await Promise.all([
        this.#mediaManager.destroy(),
        this.#screenShareManager.destroy(),
        this.#connectionManager.destroy(),
        this.#signalingService.destroy(),
        this.#roomService.destroy(),
      ])
      this.#subscribers = []
      this.#initialized = false
      this.#notifySubscribers()
    }
  }
}
