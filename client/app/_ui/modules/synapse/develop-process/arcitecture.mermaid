classDiagram
    class IModule {
        <<interface>>
        +name: string
        +dependencies?: string[]
        +initialize(): Promise~void~
        +destroy(): Promise~void~
    }

    class BaseModule {
        <<abstract>>
        #container: ServiceContainer
        #logger: Logger
        +abstract name: string
        +abstract initialize(): Promise~void~
        +abstract destroy(): Promise~void~
    }

    class LogLevel {
        <<enumeration>>
        DEBUG
        INFO
        WARN
        ERROR
    }

    class Logger {
        -collectors: LogCollector[]
        -debugMode: boolean
        -eventBus: SegmentedEventBus
        +log(level: LogLevel, message: string, data?: any): void
        +debug(message: string, data?: any): void
        +info(message: string, data?: any): void
        +warn(message: string, data?: any): void
        +error(message: string, data?: any): void
        +addCollector(collector: LogCollector): void
        +enableDebugMode(): void
        +disableDebugMode(): void
    }

    class ServiceContainer {
        -services: Map~ServiceIdentifier, any~
        -factories: Map~ServiceIdentifier, ServiceFactory~
        -metadata: Map~ServiceIdentifier, ServiceMetadata~
        -middleware: GlobalMiddleware[]
        +register(identifier: ServiceIdentifier, typeOrFactory: Type | ServiceFactory, metadata?: ServiceMetadata): void
        +get(identifier: ServiceIdentifier): any
        +use(middleware: GlobalMiddleware): void
    }

    class SegmentedEventBus {
        -segments: Map~string, EventBusSegment~
        +createSegment(name: string, config?: EventBusConfig): void
        +publish(event: Event): Promise~void~
        +subscribe(segmentName: string, subscriber: Subscriber): () => void
        +hasSegment(name: string): boolean
        +getSegment(name: string): EventBusSegment
        +removeSegment(name: string): boolean
    }

    class ModuleInitializer {
        -modules: Map~string, IModule~
        -initialized: Set~string~
        -initializing: Set~string~
        +registerModule(module: IModule): void
        +initialize(): Promise~void~
        +destroy(): Promise~void~
        +getModule(name: string): IModule
        +isInitialized(name: string): boolean
        +getDependencyGraph(): Map~string, string[]~
        -initializeModule(module: IModule): Promise~void~
        -topologicalSort(modules: IModule[]): IModule[]
    }

    class PluginManager {
        -plugins: Map~string, Plugin~
        -installedPlugins: Set~string~
        +installGlobal(plugin: GlobalPlugin): Promise~void~
        +installService(plugin: ServicePlugin): Promise~void~
        +uninstallPlugin(pluginId: string): Promise~void~
        -checkDependencies(metadata: PluginMetadata): Promise~void~
        -checkConflicts(metadata: PluginMetadata): Promise~void~
    }

    IModule <|.. BaseModule
    BaseModule *-- ServiceContainer
    BaseModule *-- Logger
    ServiceContainer *-- Logger
    ModuleInitializer *-- Logger
    PluginManager *-- Logger
    PluginManager *-- ServiceContainer
    Logger *-- SegmentedEventBus
