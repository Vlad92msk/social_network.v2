classDiagram
    direction LR
    class QueryModule {
        -queryManager: QueryManager
        -config: QueryConfig
        -pluginManager: QueryPluginManager
        -middlewareManager: QueryMiddlewareManager
        +initialize(): Promise~void~
        +destroy(): Promise~void~
    }

    class QueryManager {
        -store: StateStore
        -eventBus: SegmentedEventBus
        -effectsManager: EffectsManager
        -retryManager: RetryPolicyManager
        +createQuery(config: QueryConfig)
        +createApi(name: string, config: QueryConfig): QueryApi
        +execute(query: Query)
    }

    class QueryPluginManager {
        -plugins: Map~string, QueryPlugin~
        +installPlugin(plugin: QueryPlugin)
        +getDefaultPlugins()
        +hasPlugin(name: string)
        +getPlugin(name: string)
    }

    class QueryMiddlewareManager {
        -middleware: QueryMiddleware[]
        +use(middleware: QueryMiddleware)
        +getDefaultMiddleware()
        +execute(ctx: QueryContext)
        +remove(name: string)
    }

    class EffectsManager {
        -store: StateStore
        -eventBus: SegmentedEventBus
        -effectMiddleware: EffectMiddleware
        +watchQueryEffects(queries: Query[]): QueryEffectBuilder
        +watchSelectorEffects(selectors: Selector[]): SelectorEffectBuilder
        +combine(...effects: Effect[]): Effect
    }

    class RetryPolicyManager {
        -policies: Map~string, RetryPolicy~
        +addPolicy(name: string, policy: RetryPolicy)
        +getPolicy(name: string)
        +executeWithRetry(fn: Function, policy: RetryPolicy)
    }

    CoreModule <|-- QueryModule
    QueryModule *-- QueryManager
    QueryModule *-- QueryPluginManager
    QueryModule *-- QueryMiddlewareManager
    QueryManager --> StateStore
    QueryManager --> EffectsManager
    QueryManager --> RetryPolicyManager
    QueryPluginManager --> Logger
    QueryPluginManager --> SegmentedEventBus
    QueryMiddlewareManager --> QueryManager
