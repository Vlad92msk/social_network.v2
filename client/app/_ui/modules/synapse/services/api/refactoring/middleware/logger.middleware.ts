import { ApiEventType } from '../types/api-events.interface';
import { EnhancedApiMiddleware } from '../types/api-middleware.interface';
import { apiLogger } from '../utils/api-helpers';

/**
 * –û–ø—Ü–∏–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export interface LoggerMiddlewareOptions {
  /** –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è */
  logLevel?: 'debug' | 'info' | 'warn' | 'error';
  /** –í–∫–ª—é—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ª–æ–≥–∏ */
  includeHeaders?: boolean;
  /** –ú–∞—Å–∫–∏—Ä–æ–≤–∞—Ç—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ */
  maskSensitiveData?: boolean;
  /** –ö–ª—é—á–∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è) */
  sensitiveKeys?: string[];
  /** –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ */
  logRequestBody?: boolean;
  /** –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ */
  logResponseBody?: boolean;
  /** –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –¥–ª—è —Ç–µ–ª–∞ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ */
  truncateLength?: number;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
 * @param options –û–ø—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export function createLoggerMiddleware(options: LoggerMiddlewareOptions = {}): EnhancedApiMiddleware {
  const {
    logLevel = 'info',
    includeHeaders = true,
    maskSensitiveData = true,
    sensitiveKeys = ['authorization', 'password', 'token', 'apikey', 'api-key', 'secret'],
    logRequestBody = true,
    logResponseBody = true,
    truncateLength = 500,
  } = options;
  
  /**
   * –ú–∞—Å–∫–∏—Ä—É–µ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   * @param obj –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
   * @param keys –ö–ª—é—á–∏ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è
   * @returns –ö–æ–ø–∏—è –æ–±—ä–µ–∫—Ç–∞ —Å –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
   */
  const maskSensitive = (obj: Record<string, any>, keys: string[]): Record<string, any> => {
    if (!obj || typeof obj !== 'object') return obj;
    
    const result = { ...obj };
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –∫–ª—é—á–∏ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const lowerKeys = keys.map(k => k.toLowerCase());
    
    Object.keys(result).forEach(key => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–ª—é—á –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ
      const containsSensitive = lowerKeys.some(k => 
        key.toLowerCase().includes(k) || key.toLowerCase() === k
      );
      
      if (containsSensitive && result[key]) {
        if (typeof result[key] === 'string') {
          // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–∏–º–≤–æ–ª–∞, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∑–∞–º–µ–Ω—è–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏
          const value = result[key];
          result[key] = value.length <= 4 
            ? '****' 
            : `${value.substring(0, 2)}${'*'.repeat(Math.min(value.length - 4, 8))}${value.substring(value.length - 2)}`;
        } else {
          result[key] = '********';
        }
      } else if (typeof result[key] === 'object' && result[key] !== null) {
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –º–∞—Å–∫–∏—Ä—É–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        result[key] = maskSensitive(result[key], keys);
      }
    });
    
    return result;
  };
  
  /**
   * –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏
   * @param value –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
   * @param maxLength –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
   * @returns –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
   */
  const truncate = (value: any, maxLength: number): any => {
    if (typeof value !== 'string') {
      value = JSON.stringify(value);
    }
    
    if (value.length <= maxLength) return value;
    
    return value.substring(0, maxLength) + ` ... [truncated, ${value.length - maxLength} more chars]`;
  };
  
  /**
   * –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   * @param data –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç–∞
   * @returns –î–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  const prepareLogData = (data: Record<string, any>): Record<string, any> => {
    const result: Record<string, any> = { ...data };
    
    // –ú–∞—Å–∫–∏—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (maskSensitiveData) {
      if (includeHeaders && result.headers) {
        result.headers = maskSensitive(result.headers, sensitiveKeys);
      }
      
      if (result.body) {
        result.body = maskSensitive(result.body, sensitiveKeys);
      }
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    if (result.body && logRequestBody) {
      result.body = truncate(result.body, truncateLength);
    } else if (!logRequestBody) {
      delete result.body;
    }
    
    if (result.data && logResponseBody) {
      result.data = truncate(result.data, truncateLength);
    } else if (!logResponseBody) {
      delete result.data;
    }
    
    // –£–¥–∞–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã
    if (!includeHeaders) {
      delete result.headers;
    }
    
    return result;
  };
  
  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º
   * @param level –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   * @param message –°–æ–æ–±—â–µ–Ω–∏–µ
   * @param data –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  const log = (level: 'debug' | 'info' | 'warn' | 'error', message: string, data?: any): void => {
    const logLevels = { debug: 0, info: 1, warn: 2, error: 3 };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º
    if (logLevels[level] < logLevels[logLevel]) return;
    
    switch (level) {
      case 'debug':
        apiLogger.debug(message, data);
        break;
      case 'info':
        apiLogger.info(message, data);
        break;
      case 'warn':
        apiLogger.warn(message, data);
        break;
      case 'error':
        apiLogger.error(message, data);
        break;
    }
  };
  
  return {
    options: {
      name: 'logger-middleware',
      priority: 900, // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    },
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    request: async (request, options, context) => {
      const { endpointName } = context;
      
      log('info', `üöÄ ${endpointName}: ${request.method} ${request.path}`, prepareLogData({
        query: request.query,
        headers: options.headers,
        body: request.body,
      }));
      
      return { request, options };
    },
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    response: async (result, context) => {
      const { endpointName, duration, fromCache } = context;
      
      if (fromCache) {
        log('info', `üì¶ ${endpointName}: Response from cache in ${duration}ms`, prepareLogData({
          status: result.status,
          data: result.data,
        }));
      } else {
        log('info', `‚úÖ ${endpointName}: Response ${result.status} in ${duration}ms`, prepareLogData({
          status: result.status,
          headers: result.headers,
          data: result.data,
        }));
      }
      
      return result;
    },
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
    error: async (error, context) => {
      const { endpointName, duration } = context;
      
      log('error', `‚ùå ${endpointName}: Error in ${duration}ms`, {
        error: error.message,
        stack: error.stack,
      });
      
      return error;
    },
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
    onEvent: async (eventType, eventData) => {
      switch (eventType) {
        case ApiEventType.CACHE_HIT:
          log('debug', `üì¶ Cache hit: ${eventData.endpointName}`, {
            cacheKey: eventData.cacheKey,
          });
          break;
          
        case ApiEventType.CACHE_MISS:
          log('debug', `üîç Cache miss: ${eventData.endpointName}`, {
            cacheKey: eventData.cacheKey,
          });
          break;
          
        case ApiEventType.CACHE_SET:
          log('debug', `üíæ Cache set: ${eventData.endpointName}`, {
            cacheKey: eventData.cacheKey,
          });
          break;
          
        case ApiEventType.CACHE_INVALIDATE:
          log('debug', `üóëÔ∏è Cache invalidate`, {
            tags: eventData.tags,
            count: eventData.invalidatedCount,
          });
          break;
          
        case ApiEventType.REQUEST_CANCEL:
          log('info', `üõë Request canceled: ${eventData.endpointName}`, {
            reason: eventData.reason,
          });
          break;
      }
    },
  };
}