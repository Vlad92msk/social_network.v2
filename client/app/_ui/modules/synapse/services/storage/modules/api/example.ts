import { ApiClient, ApiContext } from './index'

/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ApiClient —Å –±–∏–ª–¥–µ—Ä–æ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
 */

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
interface User {
  id: number;
  name: string;
  email: string;
  role: string;
}

interface GetUsersParams {
  page?: number;
  limit?: number;
  filter?: string;
}

interface UsersResponse {
  data: User[];
  total: number;
  page: number;
  limit: number;
}

async function example() {
  // –°–æ–∑–¥–∞–µ–º API —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π –∏—Å–ø–æ–ª—å–∑—É—è builder pattern
  const api = new ApiClient({
    storageType: 'indexedDB',
    options: {
      name: 'user-api-storage',
      dbName: 'user-api-cache',
      storeName: 'requests',
      dbVersion: 1,
    },
    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∫—ç—à–∞
    cacheableHeaderKeys: ['authorization', 'x-client-version'],
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    cache: {
      ttl: 1000 * 60 * 30, // 30 –º–∏–Ω—É—Ç
      cleanup: {
        enabled: true,
        interval: 1000 * 60 * 60, // –û—á–∏—Å—Ç–∫–∞ —Ä–∞–∑ –≤ —á–∞—Å
      },
      invalidateOnError: true,
    },
    // –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    baseQuery: {
      baseUrl: 'https://api.example.com/v1',
      // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ - —Å —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
      prepareHeaders: (headers, context) => {
        // –¢–æ–∫–µ–Ω –∏–∑ localStorage
        const token = context.getFromStorage('token')
        if (token) {
          headers.set('Authorization', `Bearer ${token}`)
        }

        // Cookie –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        const authToken = context.getCookie?.('auth-token')
        if (authToken) {
          headers.set('X-Auth-Token', authToken)
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –∫–ª–∏–µ–Ω—Ç–∞
        headers.set('X-Client-Version', '2.0.0')

        return headers
      },
    },
    // –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ endpoints —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º builder
    endpoints: (builder) => ({
      // üëá –ü–æ–ª–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –±–ª–∞–≥–æ–¥–∞—Ä—è builder.create
      getUsers: builder.create<GetUsersParams, UsersResponse>({
        request: (params = {}) => ({
          path: '/mes-api/users',
          method: 'GET',
          query: params,
        }),
        cache: { ttl: 1000 * 60 * 5 },
        tags: ['users'],
        cacheableHeaderKeys: ['authorization', 'x-mes-hostid', 'x-mes-subsystem'],
        prepareHeaders: (headers, context) => {
          headers.set('X-Pagination-Mode', 'cursor')
          headers.set('x-mes-subsystem', 'MES')

          // –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π context –¥–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ IDE
          const currentRole = context.getCookie?.('AUPD_CURRENT_ROLE')
          if (currentRole) {
            headers.set('x-mes-hostid', currentRole.split(':')[0])
          }

          return headers
        },
      }),

      // –ï—â–µ –æ–¥–∏–Ω endpoint —Å —Ç–æ—á–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
      getUserById: builder.create({
        request: (id: number) => ({
          path: `/mes-api/users/${id}`,
          method: 'GET',
        }),
        cache: { ttl: 1000 * 60 * 10 },
        tags: ['user'],
        prepareHeaders: (headers, context) => {
          headers.set('x-mes-subsystem', 'MES')
          return headers
        },
      }),

      // Endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      createUser: builder.create({
        request: (data: Omit<User, 'id'>) => ({
          path: '/mes-api/users',
          method: 'POST',
          body: data,
        }),
        prepareHeaders: (headers, context) => {
          headers.set('x-mes-subsystem', 'MES')

          // –î–æ–±–∞–≤–ª—è–µ–º CSRF –∑–∞—â–∏—Ç—É
          const csrfToken = context.getCookie?.('csrf-token')
          if (csrfToken) {
            headers.set('X-CSRF-Token', csrfToken)
          }

          return headers
        },
        invalidatesTags: ['users'],
      }),

      // Endpoint –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      updateUser: builder.create({
        request: (data: User) => ({
          path: `/mes-api/users/${data.id}`,
          method: 'PUT',
          body: data,
        }),
        prepareHeaders: (headers, context) => {
          headers.set('x-mes-subsystem', 'MES')

          const csrfToken = context.getCookie?.('csrf-token')
          if (csrfToken) {
            headers.set('X-CSRF-Token', csrfToken)
          }

          return headers
        },
        invalidatesTags: ['user', 'users'],
      }),
    }),
  })

  // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ endpoints —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–∏–ø–æ–≤
  const endpoints = api.getEndpoints()

  // TypeScript –∑–Ω–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã!
  try {
    // –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const usersResult = await endpoints.getUsers.fetch({
      page: 1,
      limit: 10,
      filter: 'active',
    })

    console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${usersResult.data.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ ${usersResult.total}`)

    // TypeScript –∑–Ω–∞–µ—Ç, —á—Ç–æ user –∏–º–µ–µ—Ç —Ç–∏–ø User
    if (usersResult.data.length > 0) {
      const user = usersResult.data[0]

      // TypeScript –∑–Ω–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ –º–µ—Ç–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç number
      const userDetails = await endpoints.getUserById.fetch(user.id)

      // TypeScript –∑–Ω–∞–µ—Ç, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å User –±–µ–∑ id
      const newUser = await endpoints.createUser.fetch({
        name: '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        email: 'new@example.com',
        role: 'user',
      })

      // –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      await endpoints.updateUser.fetch({
        id: newUser.id,
        name: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∏–º—è',
        email: newUser.email,
        role: newUser.role,
      })
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    const state = await endpoints.getUsers.getState()
    console.log('–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', state.status)

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const unsubscribe = endpoints.getUsers.subscribe((newState) => {
      console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:', newState.status)
    })

    // –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    unsubscribe()
  } catch (error) {
    console.error('API Error:', error)
  }
}

export { example }
