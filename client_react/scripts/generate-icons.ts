import * as fs from 'fs'
import * as path from 'path'

// –ü—É—Ç–∏ –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
const ICONS_DIR = path.join(process.cwd(), 'src/assets/icons')
const OUTPUT_DIR = path.join(process.cwd(), 'src/components/ui/common/icon')

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –≤ PascalCase
function toPascalCase(str: string): string {
  return str
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join('')
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
function ensureDirectoryExists(dirPath: string): void {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true })
    console.log(`üìÅ Created directory: ${dirPath}`)
  }
}

function generateIcons() {
  console.log('üöÄ Starting icon generation...\n')

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏–∫–æ–Ω–∫–∞–º–∏
  if (!fs.existsSync(ICONS_DIR)) {
    console.error(`‚ùå Icons directory not found: ${ICONS_DIR}`)
    console.log('üí° Please create the directory and add SVG files:')
    console.log('   mkdir -p src/assets/icons')
    console.log('   # Add your .svg files to src/assets/icons/')
    return
  }

  // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  ensureDirectoryExists(OUTPUT_DIR)

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ SVG —Ñ–∞–π–ª—ã
  const svgFiles = fs.readdirSync(ICONS_DIR)
    .filter(file => file.endsWith('.svg'))
    .sort()

  if (svgFiles.length === 0) {
    console.warn('‚ö†Ô∏è  No SVG files found in icons directory')
    console.log(`üìç Looking in: ${ICONS_DIR}`)
    return
  }

  console.log(`üì¶ Found ${svgFiles.length} SVG files:`)
  svgFiles.forEach(file => console.log(`   ‚Ä¢ ${file}`))
  console.log('')

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã
  const imports = svgFiles.map((file) => {
    const name = path.basename(file, '.svg')
    const pascalName = toPascalCase(name) + 'Icon'
    // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç src/app-components/ui/Icon/ –∫ src/assets/icons/
    const relativePath = `../../../../assets/icons/${file}`
    return `import ${pascalName} from '${relativePath}?react'`
  }).join('\n')

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –∏–∫–æ–Ω–æ–∫
  const iconEntries = svgFiles.map(file => {
    const name = path.basename(file, '.svg')
    const pascalName = toPascalCase(name) + 'Icon'
    return `  '${name}': ${pascalName}`
  }).join(',\n')

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–ª—è –∏–º–µ–Ω –∏–∫–æ–Ω–æ–∫
  const iconNames = svgFiles.map(file => {
    const name = path.basename(file, '.svg')
    return `  | '${name}'`
  }).join('\n')

  // –®–∞–±–ª–æ–Ω —Ñ–∞–π–ª–∞ icons.ts
  const iconsContent = `// This file is auto-generated. Don't edit it manually
// Generated from: src/assets/icons/
// Last updated: ${new Date().toISOString()}

${imports}

export const icons = {
${iconEntries}
} as const

export type IconComponent = typeof icons[keyof typeof icons]
`

  // –®–∞–±–ª–æ–Ω —Ñ–∞–π–ª–∞ icon.model.ts
  const modelContent = `// This file is auto-generated. Don't edit it manually
// Generated from: src/assets/icons/
// Last updated: ${new Date().toISOString()}

export type IconName =
${iconNames}
`

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
  const iconsPath = path.join(OUTPUT_DIR, 'icons.ts')
  const modelPath = path.join(OUTPUT_DIR, 'icon.model.ts')

  fs.writeFileSync(iconsPath, iconsContent)
  fs.writeFileSync(modelPath, modelContent)

  console.log('‚úÖ Successfully generated icon files:')
  console.log(`   üìÑ ${path.relative(process.cwd(), iconsPath)}`)
  console.log(`   üìÑ ${path.relative(process.cwd(), modelPath)}`)
  console.log('')
  console.log('üéØ Available icons:')
  svgFiles.forEach(file => {
    const name = path.basename(file, '.svg')
    console.log(`   ‚Ä¢ <Icon name="${name}" />`)
  })
  console.log('')
  console.log('üî• Ready to use in your app-components!')
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
generateIcons()
