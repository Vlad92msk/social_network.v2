import React, { createContext, useContext, useEffect, useState, useCallback, useMemo } from 'react'
import { useNavigate } from 'react-router-dom'
import { createAuthMethods } from './providers'
import { callbackStorage, determineRedirectUrl } from './utils'
import { AUTH_CONSTANTS } from './constants'
import type { AuthState, AuthConfig } from './types'

interface AuthContextValue extends AuthState {
  // –ú–µ—Ç–æ–¥—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  signInWithGoogle: () => Promise<boolean>
  signInWithEmail: (email: string, password: string) => Promise<boolean>
  signUpWithEmail: (email: string, password: string, name: string) => Promise<boolean>
  signOut: () => Promise<void>
  resetPassword: (email: string) => Promise<void>

  // –£—Ç–∏–ª–∏—Ç—ã
  clearError: () => void
  config: AuthConfig
}

const AuthContext = createContext<AuthContextValue | null>(null)

interface AuthProviderProps {
  children: React.ReactNode
  config?: Partial<AuthConfig>
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ò–°–ü–†–ê–í–õ–Ø–ï–ú guards
const defaultConfig: AuthConfig = {
  redirects: {
    afterSignIn: '/',
    afterSignOut: '/signin',
    whenUnauthenticated: '/signin'
  },
  autoRedirect: true,
  providers: ['google', 'email'],
  authPages: [...AUTH_CONSTANTS.DEFAULT_AUTH_PAGES],
  sessionTimeout: AUTH_CONSTANTS.DEFAULT_SESSION_TIMEOUT,
  guards: {
    enabled: false, // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    globalTimeout: AUTH_CONSTANTS.DEFAULT_GUARD_TIMEOUT,
    fallback: 'component'
  }
}

export function AuthProvider({ children, config: userConfig }: AuthProviderProps) {
  const navigate = useNavigate()

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é - –ò–°–ü–†–ê–í–õ–Ø–ï–ú —Å–ª–∏—è–Ω–∏–µ guards
  const config: AuthConfig = useMemo(() => {
    const merged: AuthConfig = {
      ...defaultConfig,
      ...userConfig,
      redirects: {
        ...defaultConfig.redirects,
        ...userConfig?.redirects
      },
      authPages: userConfig?.authPages || [...AUTH_CONSTANTS.DEFAULT_AUTH_PAGES]
    }

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º guards - –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å enabled
    if (userConfig?.guards) {
      merged.guards = {
        enabled: userConfig.guards.enabled ?? defaultConfig.guards!.enabled, // –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        globalTimeout: userConfig.guards.globalTimeout ?? defaultConfig.guards!.globalTimeout,
        fallback: userConfig.guards.fallback ?? defaultConfig.guards!.fallback,
        fallbackComponent: userConfig.guards.fallbackComponent
      }
    }

    return merged
  }, [userConfig])

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const authMethods = useMemo(() => createAuthMethods(config.providers), [config.providers])

  const [state, setState] = useState<AuthState>({
    user: null,
    isLoading: true,
    error: null,
    isAuthenticated: false
  })

  // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    let hasRedirected = false

    const unsubscribe = authMethods.onAuthStateChanged((user) => {
      setState(prevState => {
        const wasAuthenticated = prevState.isAuthenticated
        const isNowAuthenticated = !!user

        // –†–µ–¥–∏—Ä–µ–∫—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (config.autoRedirect && !wasAuthenticated && isNowAuthenticated && !hasRedirected) {
          hasRedirected = true

          const callbackUrl = callbackStorage.get()
          const redirectTo = determineRedirectUrl(
            config.redirects.afterSignIn,
            callbackUrl,
            config.authPages
          )

          callbackStorage.remove()

          if (import.meta.env.DEV) {
            console.log('üöÄ AuthProvider: –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞:', redirectTo)
          }

          setTimeout(() => {
            navigate(redirectTo, { replace: true })
          }, 0)
        }

        return {
          ...prevState,
          user,
          isAuthenticated: isNowAuthenticated,
          isLoading: false
        }
      })
    })

    return unsubscribe
  }, [authMethods, config, navigate])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
  const setError = useCallback((error: string) => {
    setState(prev => ({ ...prev, error, isLoading: false }))
  }, [])

  // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–æ–∫
  const clearError = useCallback(() => {
    setState(prev => ({ ...prev, error: null }))
  }, [])

  // Google –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  const signInWithGoogle = useCallback(async (): Promise<boolean> => {
    setState(prev => ({ ...prev, isLoading: true, error: null }))

    try {
      const result = await authMethods.signInWithGoogle()

      if (result.success) {
        setState(prev => ({ ...prev, isLoading: false }))
        return true
      } else {
        setError(result.error!)
        return false
      }
    } catch (error: any) {
      setError(error.message || AUTH_CONSTANTS.MESSAGES.AUTH_ERROR)
      return false
    }
  }, [authMethods, setError])

  // Email –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  const signInWithEmail = useCallback(async (email: string, password: string): Promise<boolean> => {
    setState(prev => ({ ...prev, isLoading: true, error: null }))

    try {
      const result = await authMethods.signInWithEmail(email, password)

      if (result.success) {
        setState(prev => ({ ...prev, isLoading: false }))
        return true
      } else {
        setError(result.error!)
        return false
      }
    } catch (error: any) {
      setError(error.message || AUTH_CONSTANTS.MESSAGES.AUTH_ERROR)
      return false
    }
  }, [authMethods, setError])

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ email
  const signUpWithEmail = useCallback(async (email: string, password: string, name: string): Promise<boolean> => {
    setState(prev => ({ ...prev, isLoading: true, error: null }))

    try {
      const result = await authMethods.signUpWithEmail(email, password, name)

      if (result.success) {
        setState(prev => ({ ...prev, isLoading: false }))
        return true
      } else {
        setError(result.error!)
        return false
      }
    } catch (error: any) {
      setError(error.message || AUTH_CONSTANTS.MESSAGES.REGISTRATION_ERROR)
      return false
    }
  }, [authMethods, setError])

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  const signOut = useCallback(async (): Promise<void> => {
    setState(prev => ({ ...prev, isLoading: true, error: null }))

    try {
      await authMethods.signOut()
      setState(prev => ({ ...prev, isLoading: false }))

      callbackStorage.clear()

      if (config.autoRedirect) {
        navigate(config.redirects.afterSignOut, { replace: true })
      }
    } catch (error: any) {
      setError(AUTH_CONSTANTS.MESSAGES.SIGN_OUT_ERROR)
    }
  }, [authMethods, setError, navigate, config])

  // –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
  const resetPassword = useCallback(async (email: string): Promise<void> => {
    try {
      await authMethods.resetPassword(email)
    } catch (error: any) {
      setError(error.message)
      throw error
    }
  }, [authMethods, setError])

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const value: AuthContextValue = useMemo(() => ({
    ...state,
    signInWithGoogle,
    signInWithEmail,
    signUpWithEmail,
    signOut,
    resetPassword,
    clearError,
    config
  }), [state, signInWithGoogle, signInWithEmail, signUpWithEmail, signOut, resetPassword, clearError, config])

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  )
}

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export function useAuth(): AuthContextValue {
  const context = useContext(AuthContext)

  if (!context) {
    throw new Error(AUTH_CONSTANTS.MESSAGES.AUTH_REQUIRED)
  }

  return context
}
