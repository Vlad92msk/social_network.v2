import React, { createContext, useCallback, useContext, useEffect, useMemo, useState } from 'react'
import { useNavigate } from 'react-router-dom'

import { AUTH_CONSTANTS } from './constants'
import { useAuthConfig } from './hooks/useAuthConfig'
import { createAuthMethods } from './providers'
import type { AuthConfig, AuthState } from './types'
import { callbackStorage, determineRedirectUrl } from './utils'

interface AuthContextValue extends AuthState {
  // –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã)
  signInWithGoogle: () => Promise<boolean>
  signInWithEmail: (email: string, password: string) => Promise<boolean>
  signUpWithEmail: (email: string, password: string, name: string) => Promise<boolean>
  signOut: () => Promise<void>
  resetPassword: (email: string) => Promise<void>

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã (–º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)
  signInWithGitHub?: () => Promise<boolean>
  signInWithMicrosoft?: () => Promise<boolean>
  signInWithApple?: () => Promise<boolean>
  signInWithFacebook?: () => Promise<boolean>
  signInWithTwitter?: () => Promise<boolean>
  signInWithYahoo?: () => Promise<boolean>

  // –£—Ç–∏–ª–∏—Ç—ã
  clearError: VoidFunction
  config: AuthConfig

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
  hasProvider: (provider: string) => boolean
}

const AuthContext = createContext<AuthContextValue | null>(null)

interface AuthProviderProps {
  children: React.ReactNode
  config?: Partial<AuthConfig>
}

/**
 * –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∏ guards
 */
export function AuthProvider({ children, config: userConfig }: AuthProviderProps) {
  const navigate = useNavigate()

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ –¥–ª—è –º–µ–º–æ–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  const config = useAuthConfig(userConfig)

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const authMethods = useMemo(() => createAuthMethods(config.providers), [config.providers])

  const [state, setState] = useState<AuthState>({
    user: null,
    isLoading: true,
    error: null,
    isAuthenticated: false,
  })

  // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    let hasRedirected = false

    const unsubscribe = authMethods.onAuthStateChanged((user) => {
      setState((prevState) => {
        const wasAuthenticated = prevState.isAuthenticated
        const isNowAuthenticated = !!user

        // –†–µ–¥–∏—Ä–µ–∫—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (config.autoRedirect && !wasAuthenticated && isNowAuthenticated && !hasRedirected) {
          hasRedirected = true

          const callbackUrl = callbackStorage.get()
          const redirectTo = determineRedirectUrl(config.redirects.afterSignIn, callbackUrl, config.authPages)

          callbackStorage.remove()

          if (import.meta.env.DEV) {
            console.log('üöÄ AuthProvider: –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞:', redirectTo)
          }

          navigate(redirectTo, { replace: true })
        }

        return {
          ...prevState,
          user,
          isAuthenticated: isNowAuthenticated,
          isLoading: false,
        }
      })
    })

    return unsubscribe
  }, [authMethods, config, navigate])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
  const setError = useCallback((error: string) => {
    setState((prev) => ({ ...prev, error, isLoading: false }))
  }, [])

  // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–æ–∫
  const clearError = useCallback(() => {
    setState((prev) => ({ ...prev, error: null }))
  }, [])

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
  const createProviderHandler = useCallback(
    (methodName: string) => {
      return async (): Promise<boolean> => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (typeof authMethods[methodName] !== 'function') {
          setError(`–ü—Ä–æ–≤–∞–π–¥–µ—Ä ${methodName} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω`)
          return false
        }

        setState((prev) => ({ ...prev, isLoading: true, error: null }))

        try {
          const result = await authMethods[methodName]()

          if (result.success) {
            setState((prev) => ({ ...prev, isLoading: false }))
            return true
          } else {
            setError(result.error!)
            return false
          }
        } catch (error: any) {
          setError(error.message || AUTH_CONSTANTS.MESSAGES.AUTH_ERROR)
          return false
        }
      }
    },
    [authMethods, setError],
  )

  // –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
  const signInWithGoogle = useCallback(() => createProviderHandler('signInWithGoogle')(), [createProviderHandler])
  const signInWithEmail = useCallback(
    async (email: string, password: string): Promise<boolean> => {
      setState((prev) => ({ ...prev, isLoading: true, error: null }))

      try {
        const result = await authMethods.signInWithEmail(email, password)

        if (result.success) {
          setState((prev) => ({ ...prev, isLoading: false }))
          return true
        } else {
          setError(result.error!)
          return false
        }
      } catch (error: any) {
        setError(error.message || AUTH_CONSTANTS.MESSAGES.AUTH_ERROR)
        return false
      }
    },
    [authMethods, setError],
  )

  const signUpWithEmail = useCallback(
    async (email: string, password: string, name: string): Promise<boolean> => {
      setState((prev) => ({ ...prev, isLoading: true, error: null }))

      try {
        const result = await authMethods.signUpWithEmail(email, password, name)

        if (result.success) {
          setState((prev) => ({ ...prev, isLoading: false }))
          return true
        } else {
          setError(result.error!)
          return false
        }
      } catch (error: any) {
        setError(error.message || AUTH_CONSTANTS.MESSAGES.REGISTRATION_ERROR)
        return false
      }
    },
    [authMethods, setError],
  )

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã (—É—Å–ª–æ–≤–Ω–æ —Å–æ–∑–¥–∞—é—Ç—Å—è)
  const signInWithGitHub = useMemo(
    () => (authMethods.signInWithGitHub ? createProviderHandler('signInWithGitHub') : undefined),
    [authMethods.signInWithGitHub, createProviderHandler],
  )

  const signInWithMicrosoft = useMemo(
    () => (authMethods.signInWithMicrosoft ? createProviderHandler('signInWithMicrosoft') : undefined),
    [authMethods.signInWithMicrosoft, createProviderHandler],
  )

  const signInWithApple = useMemo(() => (authMethods.signInWithApple ? createProviderHandler('signInWithApple') : undefined), [authMethods.signInWithApple, createProviderHandler])

  const signInWithFacebook = useMemo(
    () => (authMethods.signInWithFacebook ? createProviderHandler('signInWithFacebook') : undefined),
    [authMethods.signInWithFacebook, createProviderHandler],
  )

  const signInWithTwitter = useMemo(
    () => (authMethods.signInWithTwitter ? createProviderHandler('signInWithTwitter') : undefined),
    [authMethods.signInWithTwitter, createProviderHandler],
  )

  const signInWithYahoo = useMemo(() => (authMethods.signInWithYahoo ? createProviderHandler('signInWithYahoo') : undefined), [authMethods.signInWithYahoo, createProviderHandler])

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  const signOut = useCallback(async (): Promise<void> => {
    setState((prev) => ({ ...prev, isLoading: true, error: null }))

    try {
      await authMethods.signOut()
      setState((prev) => ({ ...prev, isLoading: false }))

      callbackStorage.clear()

      if (config.autoRedirect) {
        navigate(config.redirects.afterSignOut, { replace: true })
      }
    } catch (error: any) {
      setError(AUTH_CONSTANTS.MESSAGES.SIGN_OUT_ERROR)
    }
  }, [authMethods, setError, navigate, config])

  // –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
  const resetPassword = useCallback(
    async (email: string): Promise<void> => {
      try {
        await authMethods.resetPassword(email)
      } catch (error: any) {
        setError(error.message)
        throw error
      }
    },
    [authMethods, setError],
  )

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  const hasProvider = useCallback(
    (provider: string): boolean => {
      return config.providers.includes(provider as any)
    },
    [config.providers],
  )

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const value: AuthContextValue = useMemo(
    () => ({
      ...state,
      signInWithGoogle,
      signInWithEmail,
      signUpWithEmail,
      signOut,
      resetPassword,

      // –£—Å–ª–æ–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
      ...(signInWithGitHub && { signInWithGitHub }),
      ...(signInWithMicrosoft && { signInWithMicrosoft }),
      ...(signInWithApple && { signInWithApple }),
      ...(signInWithFacebook && { signInWithFacebook }),
      ...(signInWithTwitter && { signInWithTwitter }),
      ...(signInWithYahoo && { signInWithYahoo }),

      clearError,
      config,
      hasProvider,
    }),
    [
      state,
      signInWithGoogle,
      signInWithEmail,
      signUpWithEmail,
      signOut,
      resetPassword,
      signInWithGitHub,
      signInWithMicrosoft,
      signInWithApple,
      signInWithFacebook,
      signInWithTwitter,
      signInWithYahoo,
      clearError,
      config,
      hasProvider,
    ],
  )

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>
}

export function useAuth(): AuthContextValue {
  const context = useContext(AuthContext)

  if (!context) {
    throw new Error(AUTH_CONSTANTS.MESSAGES.AUTH_REQUIRED)
  }

  return context
}
